// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.3
// source: repeated.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RepeatedServiceClient is the client API for RepeatedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RepeatedServiceClient interface {
	GetBeer(ctx context.Context, in *RequestRepeated, opts ...grpc.CallOption) (*ResponseRepeated, error)
}

type repeatedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRepeatedServiceClient(cc grpc.ClientConnInterface) RepeatedServiceClient {
	return &repeatedServiceClient{cc}
}

func (c *repeatedServiceClient) GetBeer(ctx context.Context, in *RequestRepeated, opts ...grpc.CallOption) (*ResponseRepeated, error) {
	out := new(ResponseRepeated)
	err := c.cc.Invoke(ctx, "/service.RepeatedService/GetBeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RepeatedServiceServer is the server API for RepeatedService service.
// All implementations must embed UnimplementedRepeatedServiceServer
// for forward compatibility
type RepeatedServiceServer interface {
	GetBeer(context.Context, *RequestRepeated) (*ResponseRepeated, error)
	mustEmbedUnimplementedRepeatedServiceServer()
}

// UnimplementedRepeatedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRepeatedServiceServer struct {
}

func (UnimplementedRepeatedServiceServer) GetBeer(context.Context, *RequestRepeated) (*ResponseRepeated, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeer not implemented")
}
func (UnimplementedRepeatedServiceServer) mustEmbedUnimplementedRepeatedServiceServer() {}

// UnsafeRepeatedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RepeatedServiceServer will
// result in compilation errors.
type UnsafeRepeatedServiceServer interface {
	mustEmbedUnimplementedRepeatedServiceServer()
}

func RegisterRepeatedServiceServer(s grpc.ServiceRegistrar, srv RepeatedServiceServer) {
	s.RegisterService(&RepeatedService_ServiceDesc, srv)
}

func _RepeatedService_GetBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRepeated)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RepeatedServiceServer).GetBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.RepeatedService/GetBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RepeatedServiceServer).GetBeer(ctx, req.(*RequestRepeated))
	}
	return interceptor(ctx, in, info, handler)
}

// RepeatedService_ServiceDesc is the grpc.ServiceDesc for RepeatedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RepeatedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.RepeatedService",
	HandlerType: (*RepeatedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBeer",
			Handler:    _RepeatedService_GetBeer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "repeated.proto",
}
